openapi: "3.0.0"

info:
  version: 1.0.0
  title: Laravel OpenAPI Core Feature-set API Specification

# The package will automatically create a route for each
# HTTP verb under this path.
paths:
  /parameters/{email}:
    post:
      summary: Parameter Sniff (Parameter Validation)
      description: |
        You can specify constraints on various parameters that are sent along
        with a request. These parameters can be part of the path, in the
        query-string, in headers or in cookies. These parameters can be required
        or optional and you can specify schemas to validate them.

        This endpoint is a made-up example of just about every way you can deal
        with a parameter. The schemas are fairly basic (where used), but just
        realize, you have the full power of JSON Schema to take advantage of.

      operationId: Mdwheele\OpenApi\Tests\Controllers\CoreFeaturesController@parameters
      parameters:
        - name: email
          description: |
            In Laravel, this gets passed as an argument to controller method. In
            our example, we specify that this must be an email address, for some reason.
          in: path
          required: true
          schema:
            type: string
            format: email
        - name: filter
          description: |
            You can specify query-string parameters and place constraints on them. In this
            example, the `filter` query parameter MUST be a string that's either `apples`,
            `oranges`, or `zucchini`. Anything else fails request validation.
          in: query
          schema:
            type: string
            enum: ['apples', 'oranges', 'zucchini']
        - name: X-Super-Hero
          description: |
            X-Super-Hero isn't required. But, if specified, it must be either `wonder-woman` or
            `batman`. No other super heroes exist... don't @-me.
          in: header
          schema:
            type: string
            enum: ['wonder-woman', 'batman']
        - name: X-Super-Cookie
          description: |
            Oh look at us, getting all fancy with our `allOf`. Basically, this means that
            the value of our `X-Super-Cookie` must be a string that both begins with "cookie"
            and ends with "monster". Fancy.

            Could we have used a single pattern? Sure. But then we wouldn't be as fancy.
          in: cookie
          schema:
            allOf:
              - type: string
                pattern: "^cookie.*"
              - type: string
                pattern: ".*monster$"
      responses:
        200:
          description: A dump of all parameter data sent to the API.
          content:
            application/json:
              schema:
                type: object
                required: ['message', 'path', 'query', 'header', 'cookie']
                properties:
                  message:
                    type: string
                  path:
                    type: object
                  query:
                    type: object
                  header:
                    type: object
                  cookie:
                    type: object

  /requests:
    post:
      summary: Request Sniff (Request Validation)
      description: |
        You can specify constraints on the content of a request as well! Similar to
        parameter specification, you can use JSON Schema to specify constraints on
        the form of content you accept. You can apply different constraints based on
        media type! Check it out.

      operationId: Mdwheele\OpenApi\Tests\Controllers\CoreFeaturesController@requests
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                email:
                  type: string
                  format: email
          text/plain:
            schema:
              type: string
              format: email
      responses:
        200:
          description: Default
          content:
            application/json:
              schema:
                type: object

  /health:
    get:
      summary: Service Health (Response Validation)
      description: |
        This is an example of what an API micro-service status endpoint might
        look like. For this example, we have an overall indicator of `status`
        that is either `ok`, `warning` or `critical`. This is a required property
        of the endpoint.

        Optionally, we also have a log of updates that can be sent by service
        providers when we're in a `warning` or `critical` status.

        In this example operation, if you return any status other than what's
        enumerated, you'll fail response validation. If you return any HTTP
        status code other than 200, you'll fail response validation. If you
        add any additional proprties to your updates other than `message` and
        `timestamp`, then you'll fail response validation. This is all handled
        automatically by the package!

        Check out `CoreFeaturesTest` for happy-path tests and failure scenarios.

      # We use operationId to specify the handler for this request.
      operationId: Mdwheele\OpenApi\Tests\Controllers\CoreFeaturesController@healthCheck
      responses:
        200:
          description: Health-check for the service.
          content:
            application/json:
              schema:
                type: object
                required: ['status']
                properties:
                  status:
                    type: string
                    enum: ['ok', 'warning', 'critical']
                  updates:
                    type: array
                    items:
                      type: object
                      required: ['message', 'timestamp']
                      additionalProperties: false
                      properties:
                        message:
                          type: string
                        timestamp:
                          type: string
                          format: 'date-time'

